#pragma once

#include "tuple.h"

inline r_t add_weights(const b_t board, const NTuple &tuples) {
    //++run_stats.eval_board_counter;
    r_t sum = 0;
    for (const auto &b: board.get_transformations()) {
        for (const auto &t: tuples) { sum += t[pext(b.get_bits(), t.mask)]; }
    }
    return sum;
}

inline r_t update_weights(const b_t board, const r_t gradient, NTuple &tuples) {
    //++run_stats.update_weights_counter;
    r_t sum = 0;
    for (const auto &b: board.get_transformations()) {
        for (auto &t: tuples) { sum += (t[pext(b.get_bits(), t.mask)] += gradient); }
    }
    return sum;
}

inline Eval eval_state(const b_t state, const NTuple &tuples) {
    //++run_stats.eval_moves_counter;
    Eval best{};
    for (const Dir dir: DIRS) {
        const b_t afterstate = state.slid(dir);
        if (afterstate == state) { continue; }
        const s_t reward = state.get_reward(dir);
        const r_t eval = r_t(reward) + add_weights(afterstate, tuples);
        if (best.dir == None || eval > best.eval) {
            best = {dir, eval, reward, afterstate};
        }
    }
    return best;
}

inline u64 cnt_state, cnt_afterstate;

inline r_t expectimax_afterstate(b_t afterstate, u8 depth, r_t max_prob, u64 &evals, const NTuple &tuples);

inline Eval expectimax_state(const b_t state, const u8 depth, const r_t max_prob, u64 &evals, const NTuple &tuples) {
    Eval best{};
    if (evals == 0) { return best; }
    cnt_state++;
    for (const Dir dir: DIRS) {
        const b_t afterstate = state.slid(dir);
        if (afterstate == state) { continue; }
        r_t eval = expectimax_afterstate(afterstate, depth, max_prob, evals, tuples);
        if (evals == 0) { return best; }
        const s_t reward = state.get_reward(dir);
        eval += r_t(reward);
        if (best.dir == None || eval > best.eval) {
            best = {dir, eval, reward, afterstate};
        }
    }
    best.eval += 1;
    return best;
}

inline r_t expectimax_afterstate(const b_t afterstate, u8 depth, const r_t max_prob, u64 &evals, const NTuple &tuples) {
    if (evals == 0) { return 0; }
    if (depth == 0 || max_prob < 1) {
        --evals;
        return std::max(r_t(0), add_weights(afterstate, tuples));
    }
    cnt_afterstate++;
    --depth;
    const u64 empty_mask = afterstate.empty_mask();
    const u8 empty_count = b_t::empty_count(empty_mask);
    u64 mask = 1;
    r_t sum = 0;
    r_t significance = 0;
    for (u8 i = 0; i < empty_count; mask <<= 4) {
        if (empty_mask & mask) {
            for (const auto &[shift, prob]: SHIFTS) {
                if (prob * max_prob < 1) {
                    significance += prob;
                    continue;
                }
                sum += prob * expectimax_state(afterstate | (mask << shift),
                                               depth,
                                               max_prob * prob,
                                               evals,
                                               tuples).eval;
                if (evals == 0) { return 0; }
            }
            ++i;
        }
    }
    if (significance > 0) {
        sum += significance * add_weights(afterstate, tuples);
    }
    return sum * RECIPROCALS[empty_count];
}

inline Eval expectimax_limited_depth_prob(const b_t board, const u8 depth, const r_t prob, const NTuple &tuples) {
    u64 evals = std::numeric_limits<u64>::max();
    return expectimax_state(board, depth, r_t(1) / prob, evals, tuples);
}

inline r_t get_prob(const u8 cnt1, const u8 cnt2) {
    return pow(r_t(0.9), r_t(cnt1)) * pow(r_t(0.1), r_t(cnt2));
}

inline r_t get_ratio(const u64 cnt1, const u64 cnt2) {
    return binomial(cnt1 + cnt2, cnt1) * get_prob(cnt1, cnt2);
}

inline r_t get_min_prob(const u8 depth, const r_t min_ratio) {
    u8 cnt1 = 0;
    u8 cnt2 = depth;
    while (cnt1 < depth && cnt2 > 0 && get_ratio(cnt1, cnt2) < min_ratio) {
        ++cnt1;
        --cnt2;
    }
    r_t max_prob = get_prob(cnt1, cnt2);
    //denominator D can be anything such that 1<D<9
    //because next smallest prob is max_prob/9
    return max_prob * r_t(0.5);
}

//threshold = throw away at most that portion of probabilities in total
inline r_t get_max_prob(const u8 depth, r_t threshold) {
    u8 cnt1 = 0;
    u8 cnt2 = depth;
    while (cnt1 < depth && cnt2 > 0) {
        const r_t ratio = get_ratio(cnt1, cnt2);
        if (ratio > threshold) { break; }
        threshold -= ratio;
        ++cnt1;
        --cnt2;
    }
    //cout << int(depth) << " " << int(cnt2) << " " << get_ratio(cnt1, cnt2) << " " << threshold << endl;
    return r_t(2) / get_prob(cnt1, cnt2);
}

//unordered_map<u8, r_t> depth_evals;
//unordered_map<u8, u32> depth_evals_cnt;

inline Eval expectimax_limited_evals(const b_t board, u64 evals, const r_t threshold, const NTuple &tuples) {
    // const r_t threshold = 0.05
    Eval best{};
    for (u8 depth = 0; depth < 64; ++depth) {
        const u64 evals_backup = evals;
        const Eval eval = expectimax_state(board, depth, get_max_prob(depth, threshold), evals, tuples);
        if (evals == 0) { break; }
        /*if (depth_evals.count(depth) == 0) {
            depth_evals[depth] = evals_backup - evals;
            depth_evals_cnt[depth] = 1;
        } else {
            depth_evals[depth] += evals_backup - evals;
            ++depth_evals_cnt[depth];
        }*/
        //cout << int(depth) << " " << evals_backup - evals << " " << eval.eval << endl;
        best = eval;
    }
    /*for (auto &[depth, evals]: depth_evals) {
        cout << int(depth) << " " << evals / r_t(depth_evals_cnt[depth]) << endl;
    }*/
    return best;
}

//threshold = smallest min below which it won't downgrade
inline b_t downgraded(b_t board, const u8 threshold = 15) {
    u32 used = 0;
    u8 highest = 0;
    for (u8 i = 0; i < 16; ++i) {
        const u8 cell = board.get_cell(i);
        used |= u32(1) << cell;
        if (cell > highest) { highest = cell; }
    }
    if (highest < threshold) { return board; }
    u8 missing = 0;
    for (u8 i = 1; i < highest; ++i) {
        if (((used >> i) & 1) == 0) {
            missing = i;
        }
    }
    //TODO maybe try (missing < 6) or other values
    //TODO decrease by more in case more values are missing
    if (missing < 7) { return board; }
    for (u8 i = 0; i < 16; ++i) {
        const u8 cell = board.get_cell(i);
        if (cell > missing) {
            board.set_cell(i, cell - 1);
        }
    }
    return board;
}

//threshold = smallest number that can be modified
inline b_t upgraded_old(const b_t board, const u8 threshold) {
    std::array<u8, 16> counts{};
    counts.fill(0);
    for (u8 i = 0; i < 16; ++i) {
        ++counts[board.get_cell(i)];
    }
    u8 max_double = 0;
    for (u8 i = 1; i < 16; ++i) {
        if (counts[i] > 1) {
            max_double = i;
        }
    }
    if (counts[15] == 0 || max_double > 10) { return board; }
    std::array<u8, 16> new_cells{};
    for (u8 i = 0; i < 16; ++i) {
        if (i < threshold) {
            new_cells[i] = i;
            continue;
        }
        new_cells[i] = new_cells[i - 1];
        if (counts[i] > 0) { ++new_cells[i]; }
    }
    b_t upgraded = 0;
    for (u8 i = 0; i < 16; ++i) {
        const u8 cell = board.get_cell(i);
        upgraded.set_cell(i, new_cells[cell]);
    }
    /*if (rand() % 1000 == 0) {
        cout << int(max_double) << endl;
        print_board(board);
        print_board(upgraded);
    }*/
    return upgraded;
}

inline b_t upgraded(const b_t board) {
    std::array<u8, 16> counts{};
    for (u8 i = 0; i < 16; ++i) {
        ++counts[board.get_cell(i)];
    }
    if (counts[15] == 0 || counts[14] > 0) { return board; }
    u8 max_double = 0;
    for (u8 i = 1; i < 16; ++i) {
        if (counts[i] > 1) {
            max_double = i;
        }
    }
    if (max_double > 10) { return board; }
    b_t upgraded = board;
    for (u8 i = 0; i < 16; ++i) {
        const u8 cell = board.get_cell(i);
        if (cell < 15) { continue; }
        upgraded.set_cell(i, 14);
    }
    return upgraded;
}

inline std::vector<std::pair<u32, r_t>> remaining_scores = {
        {0,     528886},
        {64,    528886},
        {128,   528886},
        {192,   528886},
        {256,   528886},
        {320,   528886},
        {384,   528886},
        {448,   528886},
        {512,   528886},
        {576,   528886},
        {640,   528886},
        {704,   528886},
        {768,   528886},
        {832,   528886},
        {896,   528886},
        {960,   528886},
        {1024,  528882},
        {1088,  528882},
        {1152,  528882},
        {1216,  528882},
        {1280,  528882},
        {1344,  528882},
        {1408,  528882},
        {1472,  528882},
        {1536,  528882},
        {1600,  528882},
        {1664,  528882},
        {1728,  528882},
        {1792,  528882},
        {1856,  528882},
        {1920,  528882},
        {1984,  528882},
        {2048,  528882},
        {2112,  528882},
        {2176,  528882},
        {2240,  528882},
        {2304,  528882},
        {2368,  528882},
        {2432,  528882},
        {2496,  528882},
        {2560,  528877},
        {2624,  528877},
        {2688,  528877},
        {2752,  528877},
        {2816,  528872},
        {2880,  528872},
        {2944,  528867},
        {3008,  528867},
        {3072,  528856},
        {3136,  528856},
        {3200,  528856},
        {3264,  528856},
        {3328,  528850},
        {3392,  528850},
        {3456,  528844},
        {3520,  528844},
        {3584,  528838},
        {3648,  528838},
        {3712,  528838},
        {3776,  528838},
        {3840,  528838},
        {3904,  528838},
        {3968,  528838},
        {4032,  528838},
        {4096,  528830},
        {4160,  528830},
        {4224,  528830},
        {4288,  528830},
        {4352,  528830},
        {4416,  528830},
        {4480,  528830},
        {4544,  528830},
        {4608,  528830},
        {4672,  528830},
        {4736,  528830},
        {4800,  528830},
        {4864,  528830},
        {4928,  528830},
        {4992,  528810},
        {5056,  528810},
        {5120,  528780},
        {5184,  528780},
        {5248,  528780},
        {5312,  528780},
        {5376,  528780},
        {5440,  528780},
        {5504,  528780},
        {5568,  528780},
        {5632,  528780},
        {5696,  528780},
        {5760,  528780},
        {5824,  528780},
        {5888,  528780},
        {5952,  528780},
        {6016,  528780},
        {6080,  528780},
        {6144,  528780},
        {6208,  528780},
        {6272,  528780},
        {6336,  528780},
        {6400,  528766},
        {6464,  528766},
        {6528,  528766},
        {6592,  528766},
        {6656,  528766},
        {6720,  528766},
        {6784,  528766},
        {6848,  528766},
        {6912,  528766},
        {6976,  528766},
        {7040,  528766},
        {7104,  528766},
        {7168,  528752},
        {7232,  528752},
        {7296,  528752},
        {7360,  528752},
        {7424,  528752},
        {7488,  528752},
        {7552,  528752},
        {7616,  528752},
        {7680,  528737},
        {7744,  528737},
        {7808,  528737},
        {7872,  528737},
        {7936,  528737},
        {8000,  528737},
        {8064,  528721},
        {8128,  528721},
        {8192,  528657},
        {8256,  528657},
        {8320,  528657},
        {8384,  528657},
        {8448,  528657},
        {8512,  528657},
        {8576,  528657},
        {8640,  528657},
        {8704,  528657},
        {8768,  528657},
        {8832,  528657},
        {8896,  528657},
        {8960,  528637},
        {9024,  528637},
        {9088,  528595},
        {9152,  528595},
        {9216,  528533},
        {9280,  528533},
        {9344,  528533},
        {9408,  528533},
        {9472,  528490},
        {9536,  528490},
        {9600,  528490},
        {9664,  528490},
        {9728,  528447},
        {9792,  528447},
        {9856,  528447},
        {9920,  528447},
        {9984,  528447},
        {10048, 528447},
        {10112, 528447},
        {10176, 528425},
        {10240, 528402},
        {10304, 528402},
        {10368, 528402},
        {10432, 528402},
        {10496, 528402},
        {10560, 528402},
        {10624, 528402},
        {10688, 528402},
        {10752, 528378},
        {10816, 528378},
        {10880, 528378},
        {10944, 528378},
        {11008, 528378},
        {11072, 528378},
        {11136, 528354},
        {11200, 528354},
        {11264, 528354},
        {11328, 528354},
        {11392, 528354},
        {11456, 528354},
        {11520, 528354},
        {11584, 528354},
        {11648, 528354},
        {11712, 528354},
        {11776, 528354},
        {11840, 528354},
        {11904, 528354},
        {11968, 528354},
        {12032, 528354},
        {12096, 528354},
        {12160, 528327},
        {12224, 528327},
        {12288, 528115},
        {12352, 528115},
        {12416, 528115},
        {12480, 528115},
        {12544, 528115},
        {12608, 528115},
        {12672, 528058},
        {12736, 528058},
        {12800, 528058},
        {12864, 528058},
        {12928, 528058},
        {12992, 528058},
        {13056, 528058},
        {13120, 528058},
        {13184, 528028},
        {13248, 528028},
        {13312, 528028},
        {13376, 528028},
        {13440, 528028},
        {13504, 528028},
        {13568, 528028},
        {13632, 528028},
        {13696, 528028},
        {13760, 528028},
        {13824, 527998},
        {13888, 527998},
        {13952, 527998},
        {14016, 527998},
        {14080, 527998},
        {14144, 527998},
        {14208, 527966},
        {14272, 527966},
        {14336, 527747},
        {14400, 527747},
        {14464, 527747},
        {14528, 527747},
        {14592, 527714},
        {14656, 527714},
        {14720, 527714},
        {14784, 527649},
        {14848, 527649},
        {14912, 527649},
        {14976, 527649},
        {15040, 527649},
        {15104, 527649},
        {15168, 527649},
        {15232, 527582},
        {15296, 527414},
        {15360, 527112},
        {15424, 527112},
        {15488, 527077},
        {15552, 527043},
        {15616, 527009},
        {15680, 526975},
        {15744, 526975},
        {15808, 526733},
        {15872, 526490},
        {15936, 526421},
        {16000, 526351},
        {16064, 526316},
        {16128, 526000},
        {16192, 525965},
        {16256, 525154},
        {16320, 525013},
        {16384, 523171},
        {16448, 523171},
        {16512, 523171},
        {16576, 523171},
        {16640, 523171},
        {16704, 523171},
        {16768, 523171},
        {16832, 523171},
        {16896, 523043},
        {16960, 523043},
        {17024, 523043},
        {17088, 523043},
        {17152, 523000},
        {17216, 523000},
        {17280, 522871},
        {17344, 522871},
        {17408, 522871},
        {17472, 522871},
        {17536, 522871},
        {17600, 522871},
        {17664, 522871},
        {17728, 522871},
        {17792, 522738},
        {17856, 522694},
        {17920, 522605},
        {17984, 522605},
        {18048, 522560},
        {18112, 522516},
        {18176, 522471},
        {18240, 522426},
        {18304, 522426},
        {18368, 522381},
        {18432, 522110},
        {18496, 522110},
        {18560, 522110},
        {18624, 522110},
        {18688, 522110},
        {18752, 522110},
        {18816, 522063},
        {18880, 522017},
        {18944, 522017},
        {19008, 522017},
        {19072, 522017},
        {19136, 522017},
        {19200, 522017},
        {19264, 522017},
        {19328, 522017},
        {19392, 522017},
        {19456, 522017},
        {19520, 522017},
        {19584, 522017},
        {19648, 522017},
        {19712, 521969},
        {19776, 521969},
        {19840, 521824},
        {19904, 521824},
        {19968, 521776},
        {20032, 521776},
        {20096, 521727},
        {20160, 521727},
        {20224, 521727},
        {20288, 521678},
        {20352, 521629},
        {20416, 521531},
        {20480, 521236},
        {20544, 521236},
        {20608, 521236},
        {20672, 521236},
        {20736, 521236},
        {20800, 521236},
        {20864, 521236},
        {20928, 521184},
        {20992, 521030},
        {21056, 521030},
        {21120, 521030},
        {21184, 520978},
        {21248, 520822},
        {21312, 520822},
        {21376, 520770},
        {21440, 520770},
        {21504, 520770},
        {21568, 520770},
        {21632, 520770},
        {21696, 520770},
        {21760, 520770},
        {21824, 520770},
        {21888, 520664},
        {21952, 520611},
        {22016, 520505},
        {22080, 520505},
        {22144, 520290},
        {22208, 520237},
        {22272, 520237},
        {22336, 520237},
        {22400, 520183},
        {22464, 520129},
        {22528, 520021},
        {22592, 520021},
        {22656, 520021},
        {22720, 520021},
        {22784, 519966},
        {22848, 519911},
        {22912, 519911},
        {22976, 519911},
        {23040, 519911},
        {23104, 519911},
        {23168, 519911},
        {23232, 519911},
        {23296, 519855},
        {23360, 519855},
        {23424, 519799},
        {23488, 519518},
        {23552, 519236},
        {23616, 519236},
        {23680, 519236},
        {23744, 519236},
        {23808, 519123},
        {23872, 519066},
        {23936, 519009},
        {24000, 518951},
        {24064, 518493},
        {24128, 518378},
        {24192, 518206},
        {24256, 518090},
        {24320, 517513},
        {24384, 517513},
        {24448, 515718},
        {24512, 515602},
        {24576, 512468},
        {24640, 512468},
        {24704, 512406},
        {24768, 512406},
        {24832, 512406},
        {24896, 512406},
        {24960, 512406},
        {25024, 512406},
        {25088, 512220},
        {25152, 512220},
        {25216, 512220},
        {25280, 512220},
        {25344, 512096},
        {25408, 512096},
        {25472, 511970},
        {25536, 511970},
        {25600, 511908},
        {25664, 511908},
        {25728, 511844},
        {25792, 511844},
        {25856, 511781},
        {25920, 511781},
        {25984, 511654},
        {26048, 511590},
        {26112, 511527},
        {26176, 511527},
        {26240, 511398},
        {26304, 511398},
        {26368, 511334},
        {26432, 511206},
        {26496, 511141},
        {26560, 511141},
        {26624, 510560},
        {26688, 510560},
        {26752, 510560},
        {26816, 510560},
        {26880, 510560},
        {26944, 510560},
        {27008, 510560},
        {27072, 510560},
        {27136, 510494},
        {27200, 510494},
        {27264, 510428},
        {27328, 510428},
        {27392, 510428},
        {27456, 510362},
        {27520, 510095},
        {27584, 510029},
        {27648, 509628},
        {27712, 509628},
        {27776, 509628},
        {27840, 509628},
        {27904, 509628},
        {27968, 509561},
        {28032, 509493},
        {28096, 509425},
        {28160, 508544},
        {28224, 508476},
        {28288, 508272},
        {28352, 508204},
        {28416, 507386},
        {28480, 507317},
        {28544, 505676},
        {28608, 505196},
        {28672, 501769},
        {28736, 501769},
        {28800, 501769},
        {28864, 501769},
        {28928, 501769},
        {28992, 501769},
        {29056, 501698},
        {29120, 501698},
        {29184, 501556},
        {29248, 501556},
        {29312, 501485},
        {29376, 501485},
        {29440, 501414},
        {29504, 501414},
        {29568, 501128},
        {29632, 500842},
        {29696, 500198},
        {29760, 500198},
        {29824, 500198},
        {29888, 500126},
        {29952, 499909},
        {30016, 499837},
        {30080, 499474},
        {30144, 499329},
        {30208, 498676},
        {30272, 498458},
        {30336, 498166},
        {30400, 497874},
        {30464, 496924},
        {30528, 496558},
        {30592, 493922},
        {30656, 492455},
        {30720, 486290},
        {30784, 486141},
        {30848, 485621},
        {30912, 485398},
        {30976, 484579},
        {31040, 484504},
        {31104, 483459},
        {31168, 482786},
        {31232, 481365},
        {31296, 481365},
        {31360, 480614},
        {31424, 480163},
        {31488, 477754},
        {31552, 477151},
        {31616, 474661},
        {31680, 473603},
        {31744, 466118},
        {31808, 465966},
        {31872, 465509},
        {31936, 464823},
        {32000, 461391},
        {32064, 460856},
        {32128, 456421},
        {32192, 454890},
        {32256, 446922},
        {32320, 446000},
        {32384, 443385},
        {32448, 441152},
        {32512, 431441},
        {32576, 426500},
        {32640, 415683},
        {32704, 410887},
        {32768, 378759},
        {32832, 378759},
        {32896, 378759},
        {32960, 378759},
        {33024, 378759},
        {33088, 378759},
        {33152, 378759},
        {33216, 378759},
        {33280, 378668},
        {33344, 378668},
        {33408, 378668},
        {33472, 378668},
        {33536, 378668},
        {33600, 378668},
        {33664, 378576},
        {33728, 378576},
        {33792, 378484},
        {33856, 378484},
        {33920, 378484},
        {33984, 378484},
        {34048, 378392},
        {34112, 378392},
        {34176, 378299},
        {34240, 378299},
        {34304, 378299},
        {34368, 378299},
        {34432, 378206},
        {34496, 378206},
        {34560, 377926},
        {34624, 377926},
        {34688, 377926},
        {34752, 377926},
        {34816, 377738},
        {34880, 377738},
        {34944, 377738},
        {35008, 377738},
        {35072, 377738},
        {35136, 377738},
        {35200, 377643},
        {35264, 377643},
        {35328, 377643},
        {35392, 377643},
        {35456, 377643},
        {35520, 377643},
        {35584, 377643},
        {35648, 377643},
        {35712, 377547},
        {35776, 377547},
        {35840, 377547},
        {35904, 377547},
        {35968, 377547},
        {36032, 377547},
        {36096, 377354},
        {36160, 377354},
        {36224, 377257},
        {36288, 377160},
        {36352, 377064},
        {36416, 377064},
        {36480, 376966},
        {36544, 376869},
        {36608, 376869},
        {36672, 376869},
        {36736, 376771},
        {36800, 376771},
        {36864, 375989},
        {36928, 375989},
        {36992, 375989},
        {37056, 375989},
        {37120, 375989},
        {37184, 375989},
        {37248, 375989},
        {37312, 375989},
        {37376, 375889},
        {37440, 375889},
        {37504, 375889},
        {37568, 375889},
        {37632, 375889},
        {37696, 375889},
        {37760, 375889},
        {37824, 375889},
        {37888, 375789},
        {37952, 375789},
        {38016, 375789},
        {38080, 375789},
        {38144, 375789},
        {38208, 375789},
        {38272, 375687},
        {38336, 375483},
        {38400, 375382},
        {38464, 375382},
        {38528, 375280},
        {38592, 375280},
        {38656, 375177},
        {38720, 374973},
        {38784, 374870},
        {38848, 374665},
        {38912, 374255},
        {38976, 374255},
        {39040, 374255},
        {39104, 374255},
        {39168, 374255},
        {39232, 374255},
        {39296, 374047},
        {39360, 373943},
        {39424, 373735},
        {39488, 373735},
        {39552, 373735},
        {39616, 373735},
        {39680, 373735},
        {39744, 373630},
        {39808, 373212},
        {39872, 373107},
        {39936, 372898},
        {40000, 372898},
        {40064, 372792},
        {40128, 372687},
        {40192, 372476},
        {40256, 372476},
        {40320, 372265},
        {40384, 372265},
        {40448, 372159},
        {40512, 372159},
        {40576, 371840},
        {40640, 371628},
        {40704, 370990},
        {40768, 370990},
        {40832, 368329},
        {40896, 367583},
        {40960, 363745},
        {41024, 363745},
        {41088, 363745},
        {41152, 363745},
        {41216, 363745},
        {41280, 363745},
        {41344, 363745},
        {41408, 363745},
        {41472, 363745},
        {41536, 363745},
        {41600, 363745},
        {41664, 363745},
        {41728, 363634},
        {41792, 363634},
        {41856, 363412},
        {41920, 363412},
        {41984, 363412},
        {42048, 363412},
        {42112, 363412},
        {42176, 363412},
        {42240, 363188},
        {42304, 363188},
        {42368, 362964},
        {42432, 362964},
        {42496, 362852},
        {42560, 362852},
        {42624, 362739},
        {42688, 362626},
        {42752, 362626},
        {42816, 362626},
        {42880, 362626},
        {42944, 362513},
        {43008, 362174},
        {43072, 362174},
        {43136, 362174},
        {43200, 362174},
        {43264, 361832},
        {43328, 361832},
        {43392, 361603},
        {43456, 361603},
        {43520, 361488},
        {43584, 361488},
        {43648, 361488},
        {43712, 361488},
        {43776, 361488},
        {43840, 361373},
        {43904, 361028},
        {43968, 360913},
        {44032, 360451},
        {44096, 360451},
        {44160, 360336},
        {44224, 360220},
        {44288, 359988},
        {44352, 359988},
        {44416, 359291},
        {44480, 359058},
        {44544, 358477},
        {44608, 358244},
        {44672, 358127},
        {44736, 357427},
        {44800, 356609},
        {44864, 356259},
        {44928, 354270},
        {44992, 353100},
        {45056, 349352},
        {45120, 349352},
        {45184, 349352},
        {45248, 349352},
        {45312, 349352},
        {45376, 349352},
        {45440, 349114},
        {45504, 349114},
        {45568, 348995},
        {45632, 348995},
        {45696, 348995},
        {45760, 348755},
        {45824, 348755},
        {45888, 348755},
        {45952, 348515},
        {46016, 348155},
        {46080, 347074},
        {46144, 347074},
        {46208, 346832},
        {46272, 346470},
        {46336, 346228},
        {46400, 346108},
        {46464, 345503},
        {46528, 345139},
        {46592, 343928},
        {46656, 343928},
        {46720, 343199},
        {46784, 342713},
        {46848, 341010},
        {46912, 340402},
        {46976, 338209},
        {47040, 336869},
        {47104, 330527},
        {47168, 330527},
        {47232, 330404},
        {47296, 329666},
        {47360, 327821},
        {47424, 327575},
        {47488, 326589},
        {47552, 326096},
        {47616, 323505},
        {47680, 323382},
        {47744, 322516},
        {47808, 321897},
        {47872, 319421},
        {47936, 318925},
        {48000, 316073},
        {48064, 314335},
        {48128, 307506},
        {48192, 307008},
        {48256, 305511},
        {48320, 304139},
        {48384, 301018},
        {48448, 299394},
        {48512, 294018},
        {48576, 292141},
        {48640, 283254},
        {48704, 282752},
        {48768, 279114},
        {48832, 277732},
        {48896, 269190},
        {48960, 265040},
        {49024, 254974},
        {49088, 249938},
        {49152, 218822},
        {49216, 218822},
        {49280, 218822},
        {49344, 218690},
        {49408, 218690},
        {49472, 218690},
        {49536, 218690},
        {49600, 218690},
        {49664, 218290},
        {49728, 218290},
        {49792, 218157},
        {49856, 218157},
        {49920, 217222},
        {49984, 217088},
        {50048, 216954},
        {50112, 216419},
        {50176, 215615},
        {50240, 215615},
        {50304, 215615},
        {50368, 215481},
        {50432, 214539},
        {50496, 214539},
        {50560, 213326},
        {50624, 212921},
        {50688, 209818},
        {50752, 209683},
        {50816, 209412},
        {50880, 209142},
        {50944, 206434},
        {51008, 206298},
        {51072, 204400},
        {51136, 203315},
        {51200, 197343},
        {51264, 197206},
        {51328, 196933},
        {51392, 196933},
        {51456, 195975},
        {51520, 195839},
        {51584, 195565},
        {51648, 195427},
        {51712, 194193},
        {51776, 194193},
        {51840, 193918},
        {51904, 193643},
        {51968, 192680},
        {52032, 192405},
        {52096, 191853},
        {52160, 191164},
        {52224, 188957},
        {52288, 188957},
        {52352, 188680},
        {52416, 188403},
        {52480, 187017},
        {52544, 186601},
        {52608, 185907},
        {52672, 184518},
        {52736, 179516},
        {52800, 179516},
        {52864, 177984},
        {52928, 176033},
        {52992, 172269},
        {53056, 171013},
        {53120, 166127},
        {53184, 163753},
        {53248, 157045},
        {53312, 157045},
        {53376, 157045},
        {53440, 156903},
        {53504, 156336},
        {53568, 156195},
        {53632, 155627},
        {53696, 155202},
        {53760, 153214},
        {53824, 153214},
        {53888, 152787},
        {53952, 152787},
        {54016, 151647},
        {54080, 151505},
        {54144, 149793},
        {54208, 148366},
        {54272, 143226},
        {54336, 143226},
        {54400, 142653},
        {54464, 142366},
        {54528, 139927},
        {54592, 139497},
        {54656, 135331},
        {54720, 132456},
        {54784, 124692},
        {54848, 123828},
        {54912, 120513},
        {54976, 118351},
        {55040, 110562},
        {55104, 108685},
        {55168, 103340},
        {55232, 99871.6},
        {55296, 93365},
        {55360, 93365},
        {55424, 93219.5},
        {55488, 93073.9},
        {55552, 92054.3},
        {55616, 92054.3},
        {55680, 90449.9},
        {55744, 89428.2},
        {55808, 84610},
        {55872, 83732.6},
        {55936, 80367.5},
        {56000, 78610.7},
        {56064, 72459.4},
        {56128, 71726.4},
        {56192, 65713.5},
        {56256, 63218.8},
        {56320, 57933.8},
        {56384, 57492.1},
        {56448, 51157.6},
        {56512, 45998.5},
        {56576, 34201.5},
        {56640, 30659.1},
        {56704, 23423.6},
        {56768, 18695.6},
        {56832, 13669.9},
        {56896, 12781.6},
        {56960, 10559.9},
        {57024, 9967.1},
        {57088, 8039.68},
        {57152, 7149.26},
        {57216, 5813.09},
        {57280, 5515.99},
        {57344, 3435.41},
        {57408, 3435.41},
        {57472, 3435.41},
        {57536, 3435.41},
        {57600, 3435.41},
        {57664, 3435.41},
        {57728, 3435.41},
        {57792, 3435.41},
        {57856, 3435.41},
        {57920, 3435.41},
        {57984, 3435.41},
        {58048, 3435.41},
        {58112, 3435.41},
        {58176, 3282.33},
        {58240, 3282.33},
        {58304, 3282.33},
        {58368, 3129.05},
        {58432, 3129.05},
        {58496, 3129.05},
        {58560, 3129.05},
        {58624, 3129.05},
        {58688, 3129.05},
        {58752, 3129.05},
        {58816, 2820.59},
        {58880, 2820.59},
        {58944, 2820.59},
        {59008, 2666},
        {59072, 2666},
        {59136, 2666},
        {59200, 2666},
        {59264, 2201.17},
        {59328, 2046.14},
        {59392, 1891.04},
        {59456, 1891.04},
        {59520, 1891.04},
        {59584, 1891.04},
        {59648, 1891.04},
        {59712, 1891.04},
        {59776, 1891.04},
        {59840, 1734.6},
        {59904, 1421.59},
        {59968, 1421.59},
        {60032, 1264.78},
        {60096, 1264.78},
        {60160, 1264.78},
        {60224, 1264.78},
        {60288, 1107.62},
        {60352, 793.125},
        {60416, 635.819},
        {60480, 635.819},
        {60544, 635.819},
        {60608, 477.916},
        {60672, 477.916},
        {60736, 319.814},
        {60800, 319.814},
        {60864, 319.814},
        {60928, 319.814},
        {60992, 319.814},
        {61056, 319.814},
        {61120, 319.814},
        {61184, 319.814},
        {61248, 319.814},
        {61312, 160.85},
        {61376, 160.85},
        {61440, 160.85},
        {61504, 160.85},
        {61568, 0},
        {61632, 0},
        {61696, 0},
        {61760, 0},
        {61824, 0},
        {61888, 0},
        {61952, 0},
        {62016, 0},
        {62080, 0},
        {62144, 0},
        {62208, 0},
        {62272, 0},
        {62336, 0},
        {62400, 0},
        {62464, 0},
        {62528, 0},
        {62592, 0},
        {62656, 0},
        {62720, 0},
        {62784, 0},
        {62848, 0},
        {62912, 0},
        {62976, 0},
        {63040, 0},
        {63104, 0},
        {63168, 0},
        {63232, 0},
        {63296, 0},
        {63360, 0},
        {63424, 0},
        {63488, 0},
        {63552, 0},
        {63616, 0},
        {63680, 0},
        {63744, 0},
        {63808, 0},
        {63872, 0},
        {63936, 0},
        {64000, 0},
        {64064, 0},
        {64128, 0},
        {64192, 0},
        {64256, 0},
        {64320, 0},
        {64384, 0},
        {64448, 0},
        {64512, 0},
        {64576, 0},
        {64640, 0},
        {64704, 0},
        {64768, 0},
        {64832, 0},
        {64896, 0},
        {64960, 0},
        {65024, 0},
        {65088, 0},
        {65152, 0},
        {65216, 0},
        {65280, 0},
        {65344, 0},
        {65408, 0}
};

inline r_t importance(const u32 sum) {
    //get index of largest first value in remaining_scores smaller than sum
    u32 index = remaining_scores.size() - 1;
    while (index > 0 && remaining_scores[index].first > sum) {
        index--;
    }
    const u32 start = index - std::min(u32(4), index);
    const u32 end = index + std::min(u32(4), u32(remaining_scores.size() - 1 - index));
    const r_t slope = -(remaining_scores[end].second - remaining_scores[start].second) / r_t(remaining_scores[end].first - remaining_scores[start].first);
    return interpolate(10000, 1000000, slope / 100);
}
